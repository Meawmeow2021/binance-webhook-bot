from flask import Flask, request, jsonify
from binance.client import Client
from telegram import Bot
import os
import asyncio
import logging

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

app = Flask(__name__)

# ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ API Keys/Tokens ‡∏à‡∏≤‡∏Å Environment Variables (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏¥‡πà‡∏á!)
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Authentication ‡∏Ç‡∏≠‡∏á Webhook ‡∏à‡∏≤‡∏Å TradingView
WEBHOOK_USERNAME = os.getenv('WEBHOOK_USERNAME')
WEBHOOK_PASSWORD = os.getenv('WEBHOOK_PASSWORD')

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Environment Variables ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not all([BINANCE_API_KEY, BINANCE_API_SECRET, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, WEBHOOK_USERNAME, WEBHOOK_PASSWORD]):
    logging.error("One or more environment variables are not set. Please check BINANCE_API_KEY, BINANCE_API_SECRET, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, WEBHOOK_USERNAME, WEBHOOK_PASSWORD.")
    # ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á exit() ‡∏´‡∏£‡∏∑‡∏≠ raise an error ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô Production
    # BINANCE_API_KEY = "YOUR_BINANCE_API_KEY"
    # BINANCE_API_SECRET = "YOUR_BINANCE_API_SECRET"
    # ...

binance_client = None
telegram_bot = None

try:
    if BINANCE_API_KEY and BINANCE_API_SECRET:
        binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)
        logging.info("Binance client initialized.")
    else:
        logging.warning("Binance API keys not set. Trading functions will be disabled.")

    if TELEGRAM_BOT_TOKEN:
        telegram_bot = Bot(token=TELEGRAM_BOT_TOKEN)
        logging.info("Telegram bot initialized.")
    else:
        logging.warning("Telegram bot token not set. Telegram notifications will be disabled.")

except Exception as e:
    logging.error(f"Error initializing clients: {e}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram (‡πÉ‡∏ä‡πâ asyncio ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å Flask app)
async def send_telegram_message(message):
    if telegram_bot and TELEGRAM_CHAT_ID:
        try:
            await telegram_bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
            logging.info(f"Telegram message sent: {message}")
        except Exception as e:
            logging.error(f"Error sending Telegram message: {e}")
    else:
        logging.warning("Telegram bot not initialized or CHAT_ID not set. Cannot send message.")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏õ Binance
async def place_binance_order(symbol, side, usdt_amount):
    if not binance_client:
        logging.error("Binance client not initialized. Cannot place order.")
        return False, "Binance client not initialized."

    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
        info = binance_client.get_symbol_info(symbol)
        if not info:
            logging.error(f"Could not get symbol info for {symbol}")
            return False, f"Could not get symbol info for {symbol}"

        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ base asset ‡πÄ‡∏õ‡πá‡∏ô USDT ‡πÅ‡∏•‡∏∞ quote asset ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢
        # ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BTCUSDT, BTC ‡∏Ñ‡∏∑‡∏≠ base, USDT ‡∏Ñ‡∏∑‡∏≠ quote
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô USDT ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠)
        if side == 'BUY':
            account_info = binance_client.get_account()
            usdt_balance = float(next((item for item in account_info['balances'] if item['asset'] == 'USDT'), {}).get('free', '0'))
            if usdt_amount > usdt_balance:
                logging.warning(f"Insufficient USDT balance for BUY order. Requested: {usdt_amount}, Available: {usdt_balance}")
                await send_telegram_message(f"üö® ALERT: Insufficient USDT for {side} {symbol}! Req: {usdt_amount}, Avail: {usdt_balance}")
                return False, "Insufficient USDT balance."

        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Market Order
        order_type = Client.ORDER_TYPE_MARKET
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢ (quantity)
        # ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á MinNotional, StepSize, MinQuantity ‡∏Ç‡∏≠‡∏á Binance
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        ticker = binance_client.get_avg_price(symbol=symbol)
        current_price = float(ticker['price'])
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì quantity ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ usdt_amount
        # Quantity = usdt_amount / current_price
        quantity = usdt_amount / current_price 
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏á Binance (filters)
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á symbol_info ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö filters
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á filters
        
        # ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö filters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö symbol_info['filters']
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
        # for f in info['filters']:
        #     if f['filterType'] == 'LOT_SIZE':
        #         min_qty = float(f['minQty'])
        #         step_size = float(f['stepSize'])
        #         quantity = max(min_qty, round(quantity / step_size) * step_size) # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô step_size
        #     if f['filterType'] == 'MIN_NOTIONAL':
        #         min_notional = float(f['minNotional'])
        #         if usdt_amount < min_notional:
        #             logging.warning(f"Order notional ({usdt_amount}) less than minimum notional ({min_notional}) for {symbol}")
        #             await send_telegram_message(f"üö® ALERT: Order notional too small for {symbol}! Req: {usdt_amount}, Min: {min_notional}")
        #             return False, "Order notional too small."
        
        # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© Quantity ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Binance ‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!)
        # Binance ‡∏°‡∏µ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (stepSize)
        # ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• symbol info ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ LOT_SIZE filter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î decimal places
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)
        # ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤ stepSize ‡∏Ñ‡∏∑‡∏≠ 0.001 ‡πÉ‡∏´‡πâ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© 3 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ Decimal ‡πÅ‡∏•‡∏∞ LOT_SIZE filter ‡∏à‡∏≤‡∏Å get_symbol_info
        # ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á:
        quantity = binance_client.quantize_quantity(quantity, symbol) # binance-python client ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢
        
        if side == 'BUY':
            order = binance_client.order_market_buy(
                symbol=symbol,
                quantity=quantity
            )
        elif side == 'SELL':
            order = binance_client.order_market_sell(
                symbol=symbol,
                quantity=quantity
            )
        else:
            logging.error(f"Invalid side: {side}")
            return False, "Invalid order side."
            
        logging.info(f"Order placed: {order}")
        await send_telegram_message(f"‚úÖ ORDER: {side} {quantity} {symbol} at {current_price} USDT")
        return True, order

    except Exception as e:
        logging.error(f"Error placing order for {symbol} ({side}) amount {usdt_amount}: {e}")
        await send_telegram_message(f"‚ùå ORDER FAILED: {side} {symbol} ({usdt_amount} USDT) - {e}")
        return False, str(e)


@app.route('/')
def home():
    return "Welcome to the Binance Webhook Bot! Access /webhook for functionality."

@app.route('/webhook', methods=['POST'])
def handle_webhook():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authentication
    auth_header = request.headers.get('Authorization')
    if auth_header:
        try:
            auth_type, credentials = auth_header.split(' ', 1)
            if auth_type == 'Basic':
                import base64
                decoded_credentials = base64.b64decode(credentials).decode('utf-8')
                username, password = decoded_credentials.split(':', 1)
                if username == WEBHOOK_USERNAME and password == WEBHOOK_PASSWORD:
                    logging.info("Webhook authentication successful.")
                else:
                    logging.warning("Invalid webhook credentials.")
                    return jsonify({"status": "error", "message": "Unauthorized"}), 401
            else:
                logging.warning(f"Unsupported authentication type: {auth_type}")
                return jsonify({"status": "error", "message": "Unsupported authentication type"}), 401
        except Exception as e:
            logging.error(f"Error processing authentication header: {e}")
            return jsonify({"status": "error", "message": "Authentication error"}), 401
    else:
        logging.warning("No Authorization header provided for webhook.")
        return jsonify({"status": "error", "message": "Unauthorized: Authorization header missing"}), 401

    try:
        data = request.json
        logging.info(f"Received webhook data: {data}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏à‡∏≤‡∏Å TradingView ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        required_keys = ['side', 'symbol', 'usdt', 'username', 'password']
        if not all(key in data for key in required_keys):
            logging.error(f"Missing required keys in webhook data. Received: {data}")
            asyncio.run(send_telegram_message(f"üö® ALERT: Webhook data missing keys: {data}"))
            return jsonify({"status": "error", "message": "Missing required data"}), 400

        side = data.get('side').upper() # BUY/SELL
        symbol = data.get('symbol').upper() # BTCUSDT
        usdt_amount = float(data.get('usdt')) # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô USDT
        # ‡∏î‡∏∂‡∏á username ‡πÅ‡∏•‡∏∞ password ‡∏à‡∏≤‡∏Å webhook message (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Env Vars)
        received_username = data.get('username')
        received_password = data.get('password')

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏•‡∏∞ password ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å TradingView
        if received_username != WEBHOOK_USERNAME or received_password != WEBHOOK_PASSWORD:
            logging.warning(f"Invalid username/password in webhook data. Received user: {received_username}")
            asyncio.run(send_telegram_message(f"üö® ALERT: Invalid username/password in webhook: {received_username}"))
            return jsonify({"status": "error", "message": "Invalid username or password in message"}), 401

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        asyncio.run(send_telegram_message(f"üîî SIGNAL: {side} {symbol} - {usdt_amount} USDT"))

        # ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ó‡∏£‡∏î‡∏ö‡∏ô Binance
        success, result = asyncio.run(place_binance_order(symbol, side, usdt_amount))

        if success:
            return jsonify({"status": "success", "message": "Webhook processed and order attempted.", "order_result": result}), 200
        else:
            return jsonify({"status": "failed", "message": "Webhook processed but order failed.", "error": result}), 500

    except Exception as e:
        logging.error(f"Error processing webhook: {e}", exc_info=True)
        asyncio.run(send_telegram_message(f"‚ùå WEBHOOK ERROR: {e}"))
        return jsonify({"status": "error", "message": f"Internal server error: {e}"}), 500

if __name__ == '__main__':
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ö‡∏ô Render/Production ‡πÉ‡∏ä‡πâ gunicorn
    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ gunicorn
    # ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö local (‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ gunicorn ‡πÉ‡∏ô local)
    app.run(host='0.0.0.0', port=os.getenv('PORT', 5000), debug=True) # ‡πÉ‡∏ä‡πâ PORT ‡∏à‡∏≤‡∏Å env var ‡∏´‡∏£‡∏∑‡∏≠ 5000